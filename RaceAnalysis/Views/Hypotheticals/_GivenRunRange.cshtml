@model RaceAnalysis.Models.HypotheticalsViewModel

<div>
  @{
        string agegroup_name = Model.Filter.AvailableAgeGroups.Where(a => a.AgeGroupId == Model.Filter.SelectedAgeGroupIds.First()).Select(a => a.DisplayName).First();
        string gender_name = Model.Filter.AvailableGenders.Where(a => a.GenderId == Model.Filter.SelectedGenderIds.First()).Select(a => a.DisplayName).First();


        string num_athletes = "";
        try
        { 
            // System.Diagnostics.Debugger.Break();
            var count = Model.Triathletes.Count();
            num_athletes = "There were " + count.ToString() + " athletes within your agegroup and gender";
        }
        catch
        {
            //System.Diagnostics.Debugger.Break();
        }


        num_athletes += " with a run range of " + Model.Filter.RunLow.ToString("hh\\:mm") + " - " + Model.Filter.RunHigh.ToString("hh\\:mm") + ".";
        var Finish_range = "";
        var skill_level_count = 0;
        var finish_range_explanation = "";
        switch (@Model.SelectedSkillLevel)
        {
            case "1":
                skill_level_count = Model.Stats[0].Finish.FastestHalf.Item1.Count();
                if (skill_level_count > 0)
                {
                    Finish_range +=
                    new TimeSpan(Model.Stats[0].Finish.FastestHalf.Item1.Min(t => t.Finish.Ticks)) + " - " +
                    new TimeSpan(Model.Stats[0].Finish.FastestHalf.Item1.Max(t => t.Finish.Ticks));
                }
                break;
            case "2":
                skill_level_count = Model.Stats[0].Finish.FastestHalf.Item2.Count();
                if (skill_level_count > 0)
                {
                    Finish_range +=
                        new TimeSpan(Model.Stats[0].Finish.FastestHalf.Item2.Min(t => t.Finish.Ticks)) + " - " +
                        new TimeSpan(Model.Stats[0].Finish.FastestHalf.Item2.Max(t => t.Finish.Ticks));
                }
                break;
            case "3":
                skill_level_count = Model.Stats[0].Finish.SlowestHalf.Item1.Count();
                if (skill_level_count > 0)
                {
                    Finish_range +=
                        new TimeSpan(Model.Stats[0].Finish.SlowestHalf.Item1.Min(t => t.Finish.Ticks)) + " - " +
                        new TimeSpan(Model.Stats[0].Finish.SlowestHalf.Item1.Max(t => t.Finish.Ticks));
                }
                break;
            case "4":
            default:
                skill_level_count = Model.Stats[0].Finish.SlowestHalf.Item2.Count();

                if (skill_level_count > 0)
                {
                    Finish_range +=
                  new TimeSpan(Model.Stats[0].Finish.SlowestHalf.Item2.Min(t => t.Finish.Ticks)) + " - " +
                  new TimeSpan(Model.Stats[0].Finish.SlowestHalf.Item2.Max(t => t.Finish.Ticks));
                }
                break;
        }
        if(skill_level_count > 0)
        {
            finish_range_explanation = String.Format("{0} of those athletes with your skill level finished in the range {1}.", skill_level_count, Finish_range);
        }
        else
        {
            finish_range_explanation = "There were no finishers that ran within that range. Try broadening the run range.";
        }
    }
    <div>
        @Html.Hidden("runlowtimevalue", Model.Filter.RunLow.Ticks)
        @Html.Hidden("runhightimevalue", Model.Filter.RunHigh.Ticks)

    </div>

    <div id="finish-results">
       @Model.Triathletes.Count()  @gender_name athletes in the age group @agegroup_name  with a run range of @Model.Filter.RunLow.ToString("hh\\:mm")  - @Model.Filter.RunHigh.ToString("hh\\:mm") 
        <br/>
       @finish_range_explanation
     </div>

</div>
@Html.Partial("_FinishHistogram", Model)